local data = require "game.modules.data"
local defsave = require "defsave.defsave"
local button = require "in.button"
local save = require "game.modules.save"

local LOAD_SCENE = hash("load_scene")
local PAUSE = hash("pause")

local UP = 270
local DOWN = -UP
local CENTER = 0
local LEFT = -540

local TRANSPARENT = vmath.vector4(1, 1, 1, 0)
local WHITE = vmath.vector4(1)

local function show(self, scene) 
	if self.current_proxy then 
		msg.post("/proxies#"..self.current_proxy, "unload") 
	end
	msg.post("/proxies#"..scene, "async_load") 
	self.current_proxy = scene
	save.set()
end

local function show_input(self)
	gui.set_position(self.info, vmath.vector3(0, 350, 0))
	gui.set_position(self.go, vmath.vector3(0, -350, 0))
	gui.set_enabled(self.input, true)
	gui.animate(self.info, gui.PROP_POSITION, vmath.vector3(0, 115, 0), gui.EASING_LINEAR, 0.5)
	gui.animate(self.go, gui.PROP_POSITION, vmath.vector3(0, -115, 0), gui.EASING_LINEAR, 0.5, 0, function()
		gui.show_keyboard(gui.KEYBOARD_TYPE_DEFAULT, true)
	end)
end

local function hide_input(self, f)
	gui.animate(self.info, gui.PROP_POSITION, vmath.vector3(0, 350, 0), gui.EASING_LINEAR, 0.5)
	gui.animate(self.go, gui.PROP_POSITION, vmath.vector3(0, -350, 0), gui.EASING_LINEAR, 0.5, 0, function()
		f()
	end)
end

local function get_nodes(self)
	self.logo = gui.get_node("logo")
	self.img = gui.get_node("img")

	self.input = gui.get_node("input")
	self.go = gui.get_node("go/icon")
	self.name = gui.get_node("name")
	self.info = gui.get_node("info")

	gui.set_enabled(self.input, false)
end

local function register_buttons(self)
	button.register(self.go, function()
		if self.name_str ~= "" then
			data.DATA.NAME = self.name_str
			hide_input(self, function()
				gui.set_enabled(self.input, false)
				show(self, "menu")
				gui.hide_keyboard()
			end)
		end
	end)
end

local function unregister_buttons(self)
	button.unregister(self.go)
end

local function load()
	local path = defsave.get_file_path("save")	
	local loaded_file = sys.load(path)
	
	if next(loaded_file) ~= nil then
		save.load()
	end
end

local function play_logo_anim(self)
	gui.set_enabled(self.logo, true)
	gui.play_flipbook(self.img, hash("ai_in"), function()
		gui.play_flipbook(self.img, hash("ai_talk"))
		timer.delay(3, false, function()
			gui.play_flipbook(self.img, hash("ai_out"), function()
				if data.DATA.FIRST_TIME then
					show_input(self)
				else
					show(self, "menu")
				end
				gui.set_enabled(self.logo, false)
			end)
		end)
	end)
end

function init(self)
	--seed the random
	math.randomseed(socket.gettime())
	math.random();math.random();math.random()
	save.init()
	button.acquire()
	load()

	get_nodes(self)
	play_logo_anim(self)
	
	register_buttons(self)

	self.name_str = "Noname"
	
	--set bg color to white
	msg.post("@render:", "clear_color", {color = vmath.vector4(1)})
	msg.post("/proxies", "acquire_input_focus")
end

function final(self)
	unregister_buttons(self)
	button.release()
end

function update(self, dt)
	data.DATA.TIME_PLAYED = data.DATA.TIME_PLAYED + dt
end

function on_message(self, message_id, message, sender)
	if message_id == LOAD_SCENE then
		show(self, message.scene)
	elseif message_id == hash("proxy_loaded") then 
		msg.post(sender, "enable") 
		msg.post("#ingame", "set_color")
	elseif message_id == hash("proxy_unloaded") then
	end
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)

	if gui.is_enabled(self.input) then
		if action_id == hash("text") then
			self.name_str = self.name_str .. action.text 
			gui.set_text(self.name, self.name_str) 
		elseif action_id == hash("key_backspace") and action.pressed then
			local l = string.len(self.name_str)
			self.name_str = string.sub(self.name_str, 0, l-1) 
			gui.set_text(self.name, self.name_str) 
		end
	end
end