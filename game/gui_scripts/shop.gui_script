local data = require "game.modules.data"
local gesture = require "in.gesture"
local cars = require "game.modules.cars"
local button = require "in.button"
local areas = require "game.modules.areas"

local ENABLE = hash("enable")

local COINS = hash("coins")
local CURRENT_CAR = hash("current_car")
local CARS = hash("cars")
local POSITIONS = {
	left = vmath.vector3(-540, 0, 0),
	right = vmath.vector3(540, 0, 0)
}

local UP = 400
local DOWN = -UP
local CENTER = 0
local LEFT = -540

local COINS_DEC_SPEED = 10000

local function set_bg(self)
	local anim = areas.get_area(data.DATA.CURRENT_AREA).anim
	gui.play_flipbook(gui.get_node("bg1"), anim)
end

local function move_in(self)
	gui.set_position(self.car, vmath.vector3(LEFT, -15, 0))
	gui.set_position(self.top, vmath.vector3(0, UP, 0))
	gui.set_position(self.bottom, vmath.vector3(0, DOWN, 0))

	set_bg(self)

	self.disable_input = true
	gui.set_text(self.coins, data.DATA.COINS)
	local anim = hash(cars.get_car(data.DATA.CURRENT_CAR).name)
	gui.play_flipbook(self.car, anim)

	gui.animate(self.car, gui.PROP_POSITION, vmath.vector3(0, -15, 0), gui.EASING_OUTSINE, 0.75, 0, function()
		gui.animate(self.top, gui.PROP_POSITION, vmath.vector3(CENTER), gui.EASING_OUTSINE, 0.5, 0)
		gui.animate(self.bottom, gui.PROP_POSITION, vmath.vector3(CENTER), gui.EASING_OUTSINE, 0.5, 0, function()
			self.disable_input = false
		end)
	end)
end

local function move_out(self, f)
	gui.animate(self.top, gui.PROP_POSITION, vmath.vector3(0, UP, 0), gui.EASING_OUTSINE, 0.35, 0)--, function()
	gui.animate(self.bottom, gui.PROP_POSITION, vmath.vector3(0, DOWN, 0), gui.EASING_OUTSINE, 0.35, 0, function()
		gui.animate(self.car, gui.PROP_POSITION, vmath.vector3(-LEFT, -15, 0), gui.EASING_OUTSINE, 0.75, 0, f)
	end)
end

local function shake(node, initial_scale)
	gui.cancel_animation(node, "scale.x")
	gui.cancel_animation(node, "scale.y")
	gui.set_scale(node, initial_scale)
	local scale = gui.get_scale(node)
	gui.set_scale(node, scale * 1.2)
	gui.animate(node, "scale.x", scale.x, gui.EASING_OUTELASTIC, 0.8)
	gui.animate(node, "scale.y", scale.y, gui.EASING_OUTELASTIC, 0.8, 0.05, function()
		gui.set_scale(node, initial_scale)
	end)
end

local function check_end(index)
	if index > cars.get_index() then
		return 1
	elseif index < 1 then
		return cars.get_index()
	end	
	return index
end

local function set_index(self)
	for t = 1, cars.get_index() do
		if data.DATA.CURRENT_CAR == t then
			return t
		end
	end
end

local function set_owned(self)
	local bought = data.has_car(self.index)
	local equipped = (data.DATA.CURRENT_CAR == self.index)

	if equipped then
		gui.set_text(self.buy_text, "TAKEN")
	elseif bought then
		gui.set_text(self.buy_text, "EQUIP")
	else
		gui.set_text(self.buy_text, "BUY")
	end
end

local function get_nodes(self)
	self.coins = gui.get_node("coin_text")
	self.car = gui.get_node("car")

	self.close = gui.get_node("close/icon")
	self.buy = gui.get_node("buy/icon")

	self.top = gui.get_node("top")
	self.car = gui.get_node("car")
	self.bottom = gui.get_node("bottom")

	self.buy_text = gui.get_node("buy/text")
	self.price_text = gui.get_node("price_text")

	self.car_info = {
		--price = 
	}
end

local function set_button_functions(self)
	button.register(self.close, function ()
		self.disable_input = true
		move_out(self, function()
			msg.post("/gui#menu", "enable")
			msg.post("#", "disable")
			self.disable_input = false
		end)
	end)

	button.register(self.buy, function()
		local bought = data.has_car(self.index)
		local equipped = (data.DATA.CURRENT_CAR == self.index)

		if not bought then		
			local c = cars.get_car(self.index).price
			if data.DATA.COINS >= c then
				cars.buy(self.index)
				
				table.insert(data.DATA.CARS, self.index)
				data.DATA.CURRENT_CAR = self.index

				local price = cars.get_car(self.index).price
				data.DATA.COINS = data.DATA.COINS - price

				self.target_coins = data.DATA.COINS
				set_owned(self)
			else
				shake(self.coins, gui.get_scale(self.coins))
			end
		elseif bought and not equipped then
			data.DATA.CURRENT_CAR = self.index
			set_owned(self)
		end
	end)
end

function init(self)
	self.index = set_index(self)
	self.disable_input = true

	self.current_coins = data.DATA.COINS
	self.target_coins = self.current_coins
	self.displayed_coins = 0

	get_nodes(self)
	button.acquire()

	move_in(self)
	set_button_functions(self)
	set_owned(self)

	gui.set_text(self.price_text, cars.get_car(self.index).price)
end

function final(self)
	button.release()
end

function update(self, dt)
	if self.current_coins > self.target_coins then
		-- increment the coins for this timestep to grow towards the target coins
		self.current_coins = self.current_coins - COINS_DEC_SPEED * dt
		-- clamp the coins so it doesn't grow past the target coins
		self.current_coins = math.max(self.current_coins, self.target_coins)
		-- floor the coins so it can be displayed without decimals
		local floored_coins = math.floor(self.current_coins)
		-- check if the displayed coins should be updated
		if self.displayed_coins ~= floored_coins then
			-- update displayed coins
			self.displayed_coins = floored_coins
			-- update the text of the coins node
			gui.set_text(self.coins, self.displayed_coins)
			-- set the scale of the coins node to be slightly bigger than normal
			local s = 1.2
			gui.set_scale(self.coins, vmath.vector3(s, s, s))
			-- then animate the scale back to the original value
			s = 1
			gui.animate(self.coins, gui.PROP_SCALE, vmath.vector3(s, s, s), gui.EASING_OUT, 0.2)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == ENABLE then
		move_in(self)
		
	end
end

function on_input(self, action_id, action)
	if self.disable_input then
		return 
	end
	
	button.on_input(action_id, action)
	local g = gesture.on_input(self, action_id, action)
	if g then
		if g.swipe_left or g.swipe_right then
			local target = self.car
			local car = gui.clone(target)

			local position = g.swipe_left and POSITIONS.right or POSITIONS.left

			gui.set_position(car, gui.get_position(target))
			gui.set_position(target, position)

			local increment = g.swipe_left and 1 or -1
			self.index = check_end(self.index + increment)

			--set_car_info(self, self.index)

			local anim = hash(cars.get_car(self.index).name)
			--gui.set_texture(self.car, "main")
			gui.play_flipbook(self.car, anim)
			gui.set_text(self.price_text, cars.get_car(self.index).price)

			self.disable_input = true

			set_owned(self)

			gui.animate(target, gui.PROP_POSITION, vmath.vector3(0), gui.EASING_OUTSINE, 1)
			gui.animate(car, gui.PROP_POSITION, g.swipe_left and POSITIONS.left or POSITIONS.right, gui.EASING_INSINE, 1, 0, function()
				self.disable_input = false
				gui.delete_node(car)
			end)
		end
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end